
import io
import pandas as pd
import streamlit as st

st.set_page_config(page_title="M·ª•c 09 - T·ªïng h·ª£p chuy·ªÉn ti·ªÅn theo m·ª•c ƒë√≠ch", layout="wide")
st.title("üì¶ M·ª•c 09 ‚Äî T·ªïng h·ª£p theo PART_NAME & M·ª•c ƒë√≠ch chuy·ªÉn ti·ªÅn (3 nƒÉm g·∫ßn nh·∫•t)")

st.markdown('''
T·∫£i l√™n file Excel **MUC 09.xlsx** (ho·∫∑c t∆∞∆°ng t·ª±) v·ªõi c√°c c·ªôt:
- `TRAN_DATE` (ng√†y giao d·ªãch)
- `TRAN_ID` (m√£ giao d·ªãch)
- `PART_NAME` (ƒë·ªëi t∆∞·ª£ng nh·∫≠n/g·ª≠i)
- `PURPOSE_OF_REMITTANCE` (m·ª•c ƒë√≠ch chuy·ªÉn ti·ªÅn)
- `QUY_DOI_USD` (s·ªë ti·ªÅn quy ƒë·ªïi USD)
''')

file = st.file_uploader("Ch·ªçn file Excel", type=["xlsx","xls"])

with st.expander("‚öôÔ∏è Tu·ª≥ ch·ªânh c·ªôt (n·∫øu t√™n c·ªôt kh√°c)"):
    col_date = st.text_input("C·ªôt ng√†y giao d·ªãch", "TRAN_DATE")
    col_tranid = st.text_input("C·ªôt m√£ giao d·ªãch", "TRAN_ID")
    col_party = st.text_input("C·ªôt PART_NAME", "PART_NAME")
    col_purpose = st.text_input("C·ªôt PURPOSE_OF_REMITTANCE", "PURPOSE_OF_REMITTANCE")
    col_amount = st.text_input("C·ªôt s·ªë ti·ªÅn (USD)", "QUY_DOI_USD")

run = st.button("‚ñ∂Ô∏è Ch·∫°y t·ªïng h·ª£p")

def build_output(df: pd.DataFrame, col_date, col_tranid, col_party, col_purpose, col_amount):
    # Chu·∫©n ho√° ng√†y v√† nƒÉm
    df = df.copy()
    df[col_date] = pd.to_datetime(df[col_date], errors="coerce")
    df["YEAR"] = df[col_date].dt.year

    # X√°c ƒë·ªãnh 3 nƒÉm g·∫ßn nh·∫•t theo d·ªØ li·ªáu th·∫≠t c√≥
    years_sorted = sorted(df["YEAR"].dropna().unique())
    if not years_sorted:
        return pd.DataFrame(), []
    nam_T = years_sorted[-1]
    cac_nam = [y for y in years_sorted if y >= nam_T - 2][-3:]  # b·∫£o v·ªá n·∫øu d·ªØ li·ªáu kh√¥ng ƒë·ªß 3 nƒÉm

    # Lo·∫°i tr√πng
    df = df.drop_duplicates(subset=[col_party, col_purpose, col_date, col_tranid])

    ket_qua = pd.DataFrame()
    ds_muc_dich = df[col_purpose].dropna().unique()

    for muc_dich in ds_muc_dich:
        df_muc_dich = df[df[col_purpose] == muc_dich]
        for nam in cac_nam:
            df_nam = df_muc_dich[df_muc_dich["YEAR"] == nam]
            if df_nam.empty:
                continue
            pivot = df_nam.groupby(col_party).agg(
                tong_lan_nhan=(col_tranid, "count"),
                tong_tien_usd=(col_amount, "sum")
            ).reset_index()
            col_lan = f"{muc_dich}_LAN_{nam}"
            col_tien = f"{muc_dich}_TIEN_{nam}"
            pivot.rename(columns={
                "tong_lan_nhan": col_lan,
                "tong_tien_usd": col_tien
            }, inplace=True)
            ket_qua = pivot if ket_qua.empty else pd.merge(ket_qua, pivot, on=col_party, how="outer")

    # Fillna & ki·ªÉu d·ªØ li·ªáu
    for c in ket_qua.columns:
        if "_LAN_" in c:
            ket_qua[c] = ket_qua[c].fillna(0).astype(int)
        elif "_TIEN_" in c:
            ket_qua[c] = ket_qua[c].fillna(0.0).astype(float)

    # S·∫Øp x·∫øp c·ªôt: PART_NAME tr∆∞·ªõc, sau ƒë√≥ theo t·ª´ng m·ª•c ƒë√≠ch/nƒÉm
    if col_party in ket_qua.columns:
        cols = [col_party] + [c for c in ket_qua.columns if c != col_party]
        ket_qua = ket_qua[cols]

    return ket_qua, cac_nam

if run:
    if file is None:
        st.warning("H√£y ch·ªçn file Excel tr∆∞·ªõc khi ch·∫°y.")
        st.stop()

    try:
        # ∆Øu ti√™n engine calamine ƒë·ªÉ ƒë·ªçc c·∫£ .xls/.xlsx n·∫øu c√≥
        try:
            df = pd.read_excel(file, engine="calamine")
        except Exception:
            df = pd.read_excel(file)  # fallback

        # Ki·ªÉm tra c·ªôt
        missing = [c for c in [col_date, col_tranid, col_party, col_purpose, col_amount] if c not in df.columns]
        if missing:
            st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
            st.stop()

        ket_qua, cac_nam = build_output(df, col_date, col_tranid, col_party, col_purpose, col_amount)

        if ket_qua.empty:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ t·ªïng h·ª£p (c√≥ th·ªÉ thi·∫øu 3 nƒÉm ho·∫∑c d·ªØ li·ªáu r·ªóng).")
        else:
            st.success(f"T·ªïng h·ª£p xong cho c√°c nƒÉm: {', '.join(map(str, cac_nam))}")
            st.dataframe(ket_qua.head(200))

            # Xu·∫•t Excel
            bio = io.BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                ket_qua.to_excel(writer, sheet_name="tong_hop", index=False)
            st.download_button(
                "‚¨áÔ∏è T·∫£i Excel t·ªïng h·ª£p",
                data=bio.getvalue(),
                file_name="tong_hop_chuyen_tien.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    except Exception as e:
        st.exception(e)
