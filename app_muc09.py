import io
import os
import pandas as pd
import streamlit as st

# ================== CONFIG ==================
st.set_page_config(page_title="M·ª•c 09 - T·ªïng h·ª£p chuy·ªÉn ti·ªÅn", layout="wide")
st.title("üì¶ M·ª•c 09 ‚Äî T·ªïng h·ª£p theo PART_NAME & M·ª•c ƒë√≠ch chuy·ªÉn ti·ªÅn (3 nƒÉm g·∫ßn nh·∫•t)")
st.caption("ƒê·ªçc ƒë∆∞·ª£c c·∫£ .xls v√† .xlsx (kh√¥ng c·∫ßn xlrd).")

st.markdown(
    """
**Y√™u c·∫ßu c·ªôt d·ªØ li·ªáu** (c√≥ th·ªÉ ƒë·ªïi t√™n ·ªü ph·∫ßn ‚öôÔ∏è):
- `TRAN_DATE` (ng√†y giao d·ªãch)
- `TRAN_ID` (m√£ giao d·ªãch)
- `PART_NAME` (b√™n li√™n quan)
- `PURPOSE_OF_REMITTANCE` (m·ª•c ƒë√≠ch chuy·ªÉn ti·ªÅn)
- `QUY_DOI_USD` (s·ªë ti·ªÅn USD)
"""
)

# ================== INPUTS ==================
file = st.file_uploader("Ch·ªçn file Excel", type=["xls", "xlsx"])

with st.expander("‚öôÔ∏è Tu·ª≥ ch·ªânh c·ªôt (n·∫øu kh√°c t√™n m·∫∑c ƒë·ªãnh)"):
    col_date = st.text_input("C·ªôt ng√†y giao d·ªãch", "TRAN_DATE")
    col_tranid = st.text_input("C·ªôt m√£ giao d·ªãch", "TRAN_ID")
    col_party = st.text_input("C·ªôt PART_NAME", "PART_NAME")
    col_purpose = st.text_input("C·ªôt PURPOSE_OF_REMITTANCE", "PURPOSE_OF_REMITTANCE")
    col_amount = st.text_input("C·ªôt s·ªë ti·ªÅn (USD)", "QUY_DOI_USD")

run = st.button("‚ñ∂Ô∏è Ch·∫°y t·ªïng h·ª£p")

# ================== HELPERS ==================
def read_excel_any(uploaded_file):
    """
    ƒê·ªçc .xls b·∫±ng calamine, .xlsx b·∫±ng openpyxl; n·∫øu l·ªói s·∫Ω t·ª± fallback qua engine c√≤n l·∫°i.
    """
    name = getattr(uploaded_file, "name", str(uploaded_file))
    ext = os.path.splitext(name)[1].lower()

    if ext == ".xls":
        # ∆Øu ti√™n calamine cho .xls
        try:
            return pd.read_excel(uploaded_file, engine="calamine")
        except Exception as e:
            st.warning(f"ƒê·ªçc .xls b·∫±ng calamine l·ªói: {e}. Th·ª≠ engine m·∫∑c ƒë·ªãnh.")
            return pd.read_excel(uploaded_file)  # c√≥ th·ªÉ v·∫´n l√† calamine n·∫øu pandas c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    else:
        # ∆Øu ti√™n openpyxl cho .xlsx
        try:
            return pd.read_excel(uploaded_file, engine="openpyxl")
        except Exception as e:
            st.warning(f"ƒê·ªçc .xlsx b·∫±ng openpyxl l·ªói: {e}. Th·ª≠ engine calamine.")
            return pd.read_excel(uploaded_file, engine="calamine")

def build_output(df: pd.DataFrame, col_date, col_tranid, col_party, col_purpose, col_amount):
    # Chu·∫©n ho√° ng√†y & nƒÉm
    df = df.copy()
    df[col_date] = pd.to_datetime(df[col_date], errors="coerce")
    df["YEAR"] = df[col_date].dt.year

    # L·∫•y 3 nƒÉm g·∫ßn nh·∫•t theo d·ªØ li·ªáu c√≥ th·∫≠t
    years = sorted([int(y) for y in df["YEAR"].dropna().unique()])
    if not years:
        return pd.DataFrame(), []
    nam_T = years[-1]
    cac_nam = [y for y in years if y >= nam_T - 2][-3:]  # b·∫£o v·ªá khi kh√¥ng ƒë·ªß 3 nƒÉm

    # Lo·∫°i tr√πng theo ƒë√∫ng logic
    df = df.drop_duplicates(subset=[col_party, col_purpose, col_date, col_tranid])

    ket_qua = pd.DataFrame()
    ds_muc_dich = df[col_purpose].dropna().unique()

    for muc_dich in ds_muc_dich:
        df_md = df[df[col_purpose] == muc_dich]
        for nam in cac_nam:
            df_y = df_md[df_md["YEAR"] == nam]
            if df_y.empty:
                continue

            pivot = (
                df_y.groupby(col_party)
                .agg(
                    tong_lan_nhan=(col_tranid, "count"),
                    tong_tien_usd=(col_amount, "sum"),
                )
                .reset_index()
            )

            # ƒê·∫∑t t√™n c·ªôt theo y√™u c·∫ßu
            col_lan = f"{muc_dich}_LAN_{nam}"
            col_tien = f"{muc_dich}_TIEN_{nam}"
            pivot.rename(
                columns={"tong_lan_nhan": col_lan, "tong_tien_usd": col_tien}, inplace=True
            )

            ket_qua = pivot if ket_qua.empty else pd.merge(ket_qua, pivot, on=col_party, how="outer")

    # Fill & √©p ki·ªÉu
    for c in ket_qua.columns:
        if "_LAN_" in c:
            ket_qua[c] = ket_qua[c].fillna(0).astype(int)
        elif "_TIEN_" in c:
            ket_qua[c] = ket_qua[c].fillna(0.0).astype(float)

    # ƒê∆∞a c·ªôt party l√™n ƒë·∫ßu
    if col_party in ket_qua.columns:
        ket_qua = ket_qua[[col_party] + [c for c in ket_qua.columns if c != col_party]]

    return ket_qua, cac_nam

# ================== RUN ==================
if run:
    if not file:
        st.error("Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc khi ch·∫°y.")
        st.stop()

    try:
        df = read_excel_any(file)

        # Ki·ªÉm tra c·ªôt
        required = [col_date, col_tranid, col_party, col_purpose, col_amount]
        missing = [c for c in required if c not in df.columns]
        if missing:
            st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
            st.stop()

        ket_qua, cac_nam = build_output(df, col_date, col_tranid, col_party, col_purpose, col_amount)

        if ket_qua.empty:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ t·ªïng h·ª£p.")
        else:
            st.success(f"T·ªïng h·ª£p xong cho c√°c nƒÉm: {', '.join(map(str, cac_nam))}")
            st.dataframe(ket_qua, use_container_width=True)

            # Xu·∫•t Excel
            bio = io.BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                ket_qua.to_excel(writer, sheet_name="tong_hop", index=False)
            st.download_button(
                "‚¨áÔ∏è T·∫£i Excel t·ªïng h·ª£p",
                data=bio.getvalue(),
                file_name="tong_hop_chuyen_tien.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

    except Exception as e:
        st.error("ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω:")
        st.exception(e)
